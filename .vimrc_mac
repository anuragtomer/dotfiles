colorscheme apprentice
set hlsearch
set incsearch
set ruler
set nowrap
set nocompatible
syntax enable
filetype indent on
set wildmenu
set lazyredraw
set showmatch
set diffopt+=iwhite
set diffexpr=DiffW()
filetype plugin on
function DiffW()
    let opt = ""
    if &diffopt =~ "icase"
        let opt = opt . "-i "
    endif
    if &diffopt =~ "iwhite"
        let opt = opt . "-w " " swapped vim's -b with -w
    endif
    silent execute "!diff -a --binary " . opt .
                \ v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction

let mapleader=","
nnoremap <leader><space> :nohlsearch<CR>
"set nu rnu
set number relativenumber
set tabstop=2
set shiftwidth=2
set expandtab

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

command! Togglenumbers :set nonu | :set nornu <CR>
" pressing jj twice presses esc
imap jj <esc>
imap Jj <esc>
imap jJ <esc>
imap JJ <esc>
map S :w<enter>
map Q :q<enter>
set tags=./tags,tags;$HOME
set colorcolumn=80
set rtp+=/usr/share/vim/addons/plugin/
python3 from powerline.vim import setup as powerline_setup
python3 powerline_setup()
python3 del powerline_setup

set laststatus=2
set mouse=a
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv
execute pathogen#infect()
set bs=2
call pathogen#infect()
syntax on
filetype plugin indent on
"autocmd VimEnter * NERDTree | wincmd p
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
            \ quit | endif
set path+=**
command! MakeTags !ctags -R .
nnoremap ,cpp :-1read $HOME/.vim/templates/skeleton.cpp<CR>7jo
nnoremap ,md :-1read $HOME/.vim/templates/skeleton.md<CR>3jA
let g:NERDTreeWinPos = "right"
"NerdTree####################################################
"Remove the help prompt from the first line
"let NERDTreeMinimalUI=1
"How wide is it on the left
"let NERDTreeWinSize=28
"Do not highlight the file under the cursor
"let NERDTreeHighlightCursorline=0
"Settings of the current directory
"let NERDTreeChDirMode = 2
"Automatic withdrawal
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
"Automatically open when opening vim
"autocmd vimenter * NERDTree
"<F2>as toggle
nmap <F2> :NERDTreeToggle<CR>

"Tagbar######################################################
"Set the distribution of the two here
"let g:tagbar_vertical = 50
"Remove the first line of help information
let g:tagbar_compact = 1
"When editing the code, inTagbarAutomatically track variables
let g:tagbar_autoshowtag = 1
"Personal hobbies, expand and close the folder icon
let g:tagbar_iconchars = ['▸', '▾']
let tagbar_right = 1
"<F3>as toggle
nmap <F3> :TagbarToggle<CR>
"Automatically open when opening vim
autocmd VimEnter * TagbarOpen
wincmd l
"If you don’t add this sentence, the current cursor will be atNerdtreearea
autocmd VimEnter * wincmd h
let g:clang_format#detect_style_file = 1
autocmd FileType c,cpp ClangFormatAutoEnable
autocmd filetype cpp nnoremap <F4> :!clang++ -fsanitize=undefined,signed-integer-overflow,null,alignment,bool,builtin,bounds,enum,float-cast-overflow,float-divide-by-zero,function,pointer-overflow,unreachable,vptr -st
autocmd filetype cpp nnoremap <F5> :!clang++ -fsanitize=undefined,signed-integer-overflow,null,alignment,bool,builtin,bounds,enum,float-cast-overflow,float-divide-by-zero,function,pointer-overflow,unreachable,vptr -st
"let g:ycm_clangd_binary_path = exepath("clang++")
"let g:ycm_clangd_uses_ycmd_caching = 0
"let g:ycm_clangd_args = ['-fsanitize=undefined,signed-integer-overflow,null,alignment,bool,builtin,bounds,enum,float-cast-overflow,float-divide-by-zero,function,pointer-overflow,unreachable,vptr', '-std=c++17']
" From vimrc_example.vim:
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"if has("vms")
"  set nobackup   " do not keep a backup file, use versions instead
"else
"  set backup   " keep a backup file
"endif

set history=50    " keep 50 lines of command line history
set ruler   " show the cursor position all the time
set showcmd   " display incomplete commands
set textwidth=70

" Jeff's cscope settings
if has("cscope")
  set csprg=/usr/local/bin/cscope
  " change this to 1 to search ctags DBs first
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  " else add database pointed to by environment
  elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
  endif
  set csverb

  " Using 'CTRL-\' then a search type makes the vim window
  " "shell-out", with search results displayed on the bottom

  nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

  " Using 'CTRL-spacebar' then a search type makes the vim window
  " split horizontally, with search result displayed in
  " the new window.

  nmap <C-[>s :scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>g :scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>c :scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>t :scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>e :scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-[>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-[>d :scs find d <C-R>=expand("<cword>")<CR><CR>

  " Hitting CTRL-space *twice* before the search type does a vertical
  " split instead of a horizontal one

  nmap <C-[><C-[>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[><C-[>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[><C-[>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[><C-[>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[><C-[>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[><C-[>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-[><C-[>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=70

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END
else
  set autoindent
endif " has("autocmd")
" End From vimrc_example.vim

" Personal configurations:

" Set quick escape from insert mode.
imap jj <esc>
imap Jj <esc>
imap jJ <esc>
imap JJ <esc>

" Set quick command mode from normal mode.
map ; :

" Set quick save from command mode.
map S ;w<enter>

" Set quick visual folder browsing.
map T ;edit ./<enter>

" Indent a block of code.
map e ;s/^/    /<enter>
map E ;s/^    //<enter>

" Enable the syntax highlighting on enabled terminals.
if &t_Co > 1
   syntax enable
endif

" Enable fast window switching.
map t ;wincmd

" Place the cursor in the center of the screen at all times.
"set scrolloff=999

" Force cursor to be 'near' center of the screen after scrolling down.
set scrolljump=15

" For gvim.
"if has("gui_running")
"    " Preferred Font
"    if has("gui_gtk2")
"        set guifont=Bitstream\ Vera\ Sans\ Mono\ 16
"    elseif has("x11")
"        set guifont=-bitstream-bitstream\ vera\ sans\ mono-medium-r-normal-*-*-160-*-*-m-*-microsoft-cp1252
"    else
"        set guifont=Bitstream_Vera_Sans_Mono:h16:cDEFAULT
"    endif
"    " Preferred Location
"    winpos 50 50
"    " Preferred Size
"    set lines=45 columns=90
"    " Color Scheme
"    colors desert
"else
"    " For reverse video display.
"    set background=dark
"endif

" Buffer manipulation commands
map H ;tabp<enter>
map L ;tabn<enter>
map F ;tab

" Turn on autosave.
set autowrite

" Turn on paren high-lighting.
set showmatch

" splitting shortcuts
map B ;vsplit<enter>;wincmd l<enter>;n
map X ;split<enter>;wincmd j<enter>;n

" use console mouse
set mouse=a

" use cursor line highlighting
if version >= 700
        " set cursorline
endif

" map f11/12 keys to forward-back in quick-fix
map <F11> ;cp<enter>
map <F12> ;cn<enter>

" reset the cscope connection
"function UpdateCscope()
" !cscope -qRb
" cs restart
"endfunction
"command CUP call UpdateCscope()

" alignment command
map B mzgqap`z

" Manual pages
runtime! ftplugin/man.vim
